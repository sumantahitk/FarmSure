// controllers/notificationController.js

import { Notification } from "../models/notification.js";
import { Demand } from "../models/demand.js";
import { Contract } from "../models/contract.js";
import { Farmer } from "../models/farmer.js";
import { Buyer } from "../models/buyer.js";

// Create a notification when a contract is signed by a farmer
export const createNotificationForSignedDeal = async (req, res) => {
    try {
        const { demandId, contractId } = req.params;
        const farmerId = req.id;
        console.log("farmer id :v ",farmerId)

        // Fetch the demand to get the buyer ID
        const demand = await Demand.findById(demandId);
        const contract = await Contract.findById(contractId);

        if (!demand || !contract) {
            return res.status(404).json({ message: 'Demand or Contract not found.', success: false });
        }

        const notification = await Notification.create({
            farmerId,
            buyerId: demand.buyerId,
            demandId: demand._id,
            contractId: contract._id,
            message: `A farmer has signed a deal for your demand: ${demand.cropName}.`,
            senderType: 'farmer' // Mark the sender as a farmer
        });

        return res.status(201).json({
            message: 'Notification created for signed deal.',
            notification,
            success: true
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error', success: false });
    }
};

// Buyer response to the contract: accept or reject
export const handleBuyerResponseToContract = async (req, res) => {
    try {
        const { notificationId } = req.params;
        const { response } = req.body; // 'accept' or 'reject'
        const buyerId = req.id;

        // Fetch the notification to get details like demandId, contractId, and farmerId
        const notification = await Notification.findById(notificationId);

        if (!notification || notification.buyerId.toString() !== buyerId.toString()) {
            return res.status(404).json({ message: 'Notification not found or unauthorized access.', success: false });
        }

        let message = '';
        if (response === 'accept') {
            message = `The buyer has accepted the contract for your demand: ${notification.demandId.cropName}.`;
            // Update the demand status to 'Closed'
            await Demand.findByIdAndUpdate(notification.demandId, { status: 'Closed' });
        } else if (response === 'reject') {
            message = `The buyer has rejected the contract for your demand: ${notification.demandId.cropName}.`;
        } else {
            return res.status(400).json({ message: 'Invalid response.', success: false });
        }

        // Create a reverse notification for the farmer
        const reverseNotification = await Notification.create({
            farmerId: notification.farmerId,
            buyerId: buyerId,
            demandId: notification.demandId,
            contractId: notification.contractId,
            message,
            senderType: 'buyer' // Mark the sender as a buyer
        });

        // Update the original notification status to 'Read'
        notification.status = 'Read';
        await notification.save();

        return res.status(201).json({
            message: 'Buyer response processed and notification sent to farmer.',
            reverseNotification,
            success: true
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error', success: false });
    }
};

// Get all notifications for a farmer (sent by buyers)
export const getNotificationsForFarmer = async (req, res) => {
    try {
        const farmerId = req.id;

        const notifications = await Notification.find({ farmerId, senderType: 'buyer' })
            .sort({ createdAt: -1 })
            .populate({ path: 'demandId', select: 'cropName pricePerUnit quantity' })
            .populate({ path: 'buyerId', select: 'username profilePicture' });
        console.log(notifications);
        return res.status(200).json({
            notifications,
            success: true
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error', success: false });
    }
};

// Get all notifications for a buyer (sent by farmers)
export const getNotificationsForBuyer = async (req, res) => {
    try {
        const buyerId = req.id;

        const notifications = await Notification.find({ buyerId, senderType: 'farmer' })
            .sort({ createdAt: -1 })
            .populate({ path: 'demandId', select: 'cropName pricePerUnit quantity' })
            .populate({ path: 'farmerId', select: 'username profilePicture' });
        console.log(notifications);
        return res.status(200).json({
            notifications,
            success: true
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error', success: false });
    }
};


// Mark notification as read
export const markNotificationAsRead = async (req, res) => {
    try {
        const { notificationId } = req.params;

        const notification = await Notification.findByIdAndUpdate(notificationId, { status: 'Read' }, { new: true });

        if (!notification) {
            return res.status(404).json({ message: 'Notification not found.', success: false });
        }

        return res.status(200).json({
            message: 'Notification marked as read.',
            notification,
            success: true
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({ message: 'Server error', success: false });
    }
};
